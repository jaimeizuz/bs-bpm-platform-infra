services:
  scib-secure-test-service:
    container_name: scib-secure-test-service
    image: 'scib-secure-test-service:1.0.0'
    profiles:
      - scib-secure-test-service
    ports:
      - '9999:8080'
    cpus: 0.5
    mem_limit: 150m
    environment:
      QUARKUS_OAUTH2_CLIENT_ID: scib-backend-services-client
      QUARKUS_OAUTH2_CLIENT_SECRET: FKgGGh6keQWgHnc7VRF75JBtQXpvhr2D
      QUARKUS_OAUTH2_INTROSPECTION_URL: http://keycloak:8080/realms/scib-backend-services/protocol/openid-connect/token/introspect
      QUARKUS_REST_CLIENT_LOGGING_SCOPE: request-response
  test-process-service-1:
    container_name: test-process-service-1
    image: 'dev.local/kogito-bpmn-sample-project:1.0.0'
    profiles:
      - bamoe-process-service
    ports:
      - '8680:8080'
    cpus: 1
    mem_limit: 500m
    environment:
      KOGITO_PERSISTENCE_PROTO_MARSHALLER: "false"
      QUARKUS_HTTP_CORS_ORIGINS: /.*/
      # See https://quarkus.io/guides/datasource#jdbc-configuration
      QUARKUS_DATASOURCE_JDBC_URL: 'jdbc:postgresql://postgres:5432/postgres?currentSchema=kogito'
      QUARKUS_DATASOURCE_REACTIVE_URL: 'postgresql://postgres:5432/postgres?currentSchema=kogito'
      QUARKUS_DATASOURCE_USERNAME: postgres
      QUARKUS_DATASOURCE_PASSWORD: postgres
      QUARKUS_DATASOURCE_DB_KIND: postgresql
      KOGITO_SERVICE_URL: 'http://test-process-service-1:8080'
      KOGITO_DATA_INDEX_URL: 'http://localhost:8080'
      KOGITO_JOBS_SERVICE_URL: 'http://localhost:8080'
      QUARKUS_FLYWAY_MIGRATE-AT-START: "false"
      QUARKUS_FLYWAY_BASELINE-ON-MIGRATE: "true"
      QUARKUS_FLYWAY_BASELINE-VERSION: "0.0"
      QUARKUS_FLYWAY_LOCATIONS: "classpath:/db/migration,classpath:/db/jobs-service,classpath:/db/data-audit/postgresql"
      QUARKUS_FLYWAY_TABLE: "FLYWAY_RUNTIME_SERVICE"
      QUARKUS_FLYWAY_OUT-OF-ORDER: "true"
    depends_on:
      postgres:
        condition: service_started
      redpanda:
        condition: service_healthy
  test-process-service-2:
    container_name: test-process-service-2
    image: 'dev.local/kogito-bpmn-sample-project:1.1.0'
    profiles:
      - bamoe-process-service
    ports:
      - '8780:8080'
    cpus: 1
    mem_limit: 500m
    environment:
      KOGITO_PERSISTENCE_PROTO_MARSHALLER: "false"
      QUARKUS_HTTP_CORS_ORIGINS: /.*/
      # See https://quarkus.io/guides/datasource#jdbc-configuration
      QUARKUS_DATASOURCE_JDBC_URL: 'jdbc:postgresql://postgres:5432/postgres?currentSchema=kogito'
      QUARKUS_DATASOURCE_REACTIVE_URL: 'postgresql://postgres:5432/postgres?currentSchema=kogito'
      QUARKUS_DATASOURCE_USERNAME: postgres
      QUARKUS_DATASOURCE_PASSWORD: postgres
      QUARKUS_DATASOURCE_DB_KIND: postgresql
      KOGITO_SERVICE_URL: 'http://test-process-service-2:8080'
      KOGITO_DATA_INDEX_URL: 'http://localhost:8080'
      KOGITO_JOBS_SERVICE_URL: 'http://localhost:8080'
      QUARKUS_FLYWAY_MIGRATE-AT-START: "false"
      QUARKUS_FLYWAY_BASELINE-ON-MIGRATE: "true"
      QUARKUS_FLYWAY_BASELINE-VERSION: "0.0"
      QUARKUS_FLYWAY_LOCATIONS: "classpath:/db/migration,classpath:/db/jobs-service,classpath:/db/data-audit/postgresql"
      QUARKUS_FLYWAY_TABLE: "FLYWAY_RUNTIME_SERVICE"
      QUARKUS_FLYWAY_OUT-OF-ORDER: "true"
    depends_on:
      postgres:
        condition: service_started
      redpanda:
        condition: service_healthy
  scib-fund-onboarding-process-service:
    container_name: scib-fund-onboarding-process-service
    image: 'scib-fund-onboarding-process-service:1.0.0'
    profiles:
      - bamoe-process-service
    ports:
      - '8080:8080'
      - '8083:8083'
    cpus: 2
    mem_limit: 500m
    environment:
      KOGITO_PERSISTENCE_PROTO_MARSHALLER: "false"
      QUARKUS_HTTP_CORS_ORIGINS: /.*/
      # See https://quarkus.io/guides/datasource#jdbc-configuration
      QUARKUS_DATASOURCE_JDBC_URL: 'jdbc:postgresql://postgres:5432/postgres?currentSchema=kogito'
      QUARKUS_DATASOURCE_REACTIVE_URL: 'postgresql://postgres:5432/postgres?currentSchema=kogito'
      QUARKUS_DATASOURCE_USERNAME: postgres
      QUARKUS_DATASOURCE_PASSWORD: postgres
      QUARKUS_DATASOURCE_DB_KIND: postgresql
      QUARKUS_DATASOURCE_JDBC_ENABLE_METRICS: "false"
      QUARKUS_DATASOURCE_JDBC_METRICS_ENABLED: "false"
      # The initial size of the pool. Usually you will want to set the initial size to match at least the minimal size, 
      # but this is not enforced so to allow for architectures which prefer a lazy initialization of the connections on boot, 
      # while being able to sustain a minimal pool size after boot. DEFAULT: null
      QUARKUS_DATASOURCE_JDBC_INITIAL_SIZE: 20
      # The datasource pool minimum size. DEFAULT: 0
      QUARKUS_DATASOURCE_JDBC_MIN_SIZE: 20
      # The datasource pool maximum size. DEFAULT: 20
      QUARKUS_DATASOURCE_JDBC_MAX_SIZE: 40
      # The interval at which we validate idle connections in the background. Set to 0 to disable background validation. DEFAULT: 2M
      # QUARKUS_DATASOURCE_JDBC_BACKGROUND_VALIDATION_INTERVAL: 2M
      # Perform foreground validation on connections that have been idle for longer than the specified interval. DEFAULT: null
      # QUARKUS_DATASOURCE_JDBC_FOREGROUND_VALIDATION_INTERVAL: 15S
      # The timeout before cancelling the acquisition of a new connection. DEFAULT: 5S
      # QUARKUS_DATASOURCE_JDBC_ACQUISITION_TIMEOUT: 5S
      # The interval at which we check for connection leaks. DEFAULT: disabled
      # QUARKUS_DATASOURCE_JDBC_LEAK_DETECTION_INTERVAL: 10M
      # The interval at which we try to remove idle connections. DEFAULT: 5M
      # QUARKUS_DATASOURCE_JDBC_IDLE_REMOVAL_INTERVAL: 5M
      # The max lifetime of a connection. DEFAULT: disabled
      # QUARKUS_DATASOURCE_JDBC_MAX_LIFETIME: 1M
      # The transaction isolation level. DEFAULT: null
      # QUARKUS_DATASOURCE_JDBC_TRANSACTION_ISOLATION_LEVEL: undefined, none, read-uncommitted, read-committed, repeatable-read, serializable
      QUARKUS_REST_CLIENT__DUMMY_REST_SERVICE__URL: http://wiremock:9002
      QUARKUS_REST_CLIENT__GBO_REST_SERVICE__URL: http://wiremock:9002
      KOGITO_SERVICE_URL: 'http://scib-fund-onboarding-process-service:8080'
      KOGITO_DATA_INDEX_URL: 'http://localhost:8080'
      KOGITO_JOBS_SERVICE_URL: 'http://localhost:8080'
      # The current chunk size in minutes the scheduler handles, it is used to keep a limit number of jobs scheduled
      # in the in-memory scheduler.
      #KOGITO_JOBS-SERVICE_SCHEDULERCHUNKINMINUTES: 10
      # The interval the job loading method runs to fetch the persisted jobs from the repository.
      #KOGITO_JOBS-SERVICE_LOADJOBINTERVALINMINUTES: 10
      # The interval based on the current time the job loading method uses to fetch jobs "FROM (now -
      # {@link #loadJobFromCurrentTimeIntervalInMinutes}) TO {@link #schedulerChunkInMinutes}"
      #KOGITO_JOBS-SERVICE_LOADJOBFROMCURRENTTIMEINTERVALINMINUTES: 0
      # Number of retries configured for the periodic jobs loading procedure. Every time the procedure is started this
      # value is considered.
      #KOGITO_JOBS-SERVICE_LOADJOBRETRIES: 3
      # Error strategy to apply when the periodic jobs loading procedure has exceeded the jobLoadReties. NONE, FAIL_SERVICE
      #KOGITO_JOBS-SERVICE_LOADJOBERRORSTRATEGY: FAIL_SERVICE
      QUARKUS_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://opentelemetry-collector:4317
      #QUARKUS_MICROMETER_EXPORT_OTLP_URL: http://opentelemetry-collector:4318
      QUARKUS_DATASOURCE_JDBC_TELEMETRY: "true"
      QUARKUS_DATASOURCE_JDBC_TELEMETRY_ENABLED: "true"
      QUARKUS_DATASOURCE_JDBC_TRACING: "true"
      QUARKUS_DATASOURCE_JDBC_TRACING_ENABLED: "true"
      QUARKUS_LOG_HANDLER_GELF_ENABLED: "false"
      QUARKUS_LOG_HANDLER_GELF_HOST: logstash
      QUARKUS_LOG_HANDLER_GELF_PORT: 12201
      QUARKUS_LOG_HANDLER_GELF_INCLUDE_FULL_MDC: "true"
      KAFKA_BOOTSTRAP_SERVERS: redpanda:9093
      MP_MESSAGING_OUTGOING_KOGITO-PROCESSINSTANCES-EVENTS_BOOTSTRAP_SERVERS: redpanda:9093
      MP_MESSAGING_OUTGOING_KOGITO-PROCESSINSTANCES-EVENTS_CONNECTOR: smallrye-kafka
      MP_MESSAGING_OUTGOING_KOGITO-PROCESSINSTANCES-EVENTS_TOPIC: kogito-processinstances-events
      MP_MESSAGING_OUTGOING_KOGITO-PROCESSINSTANCES-EVENTS_VALUE_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      MP_MESSAGING_OUTGOING_KOGITO-USERTASKINSTANCES-EVENTS_BOOTSTRAP_SERVERS: redpanda:9093
      MP_MESSAGING_OUTGOING_KOGITO-USERTASKINSTANCES-EVENTS_CONNECTOR: smallrye-kafka
      MP_MESSAGING_OUTGOING_KOGITO-USERTASKINSTANCES-EVENTS_TOPIC: kogito-usertaskinstances-events
      MP_MESSAGING_OUTGOING_KOGITO-USERTASKINSTANCES-EVENTS_VALUE_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      MP_MESSAGING_OUTGOING_KOGITO-PROCESSDEFINITIONS-EVENTS_BOOTSTRAP_SERVERS: redpanda:9093
      MP_MESSAGING_OUTGOING_KOGITO-PROCESSDEFINITIONS-EVENTS_CONNECTOR: smallrye-kafka
      MP_MESSAGING_OUTGOING_KOGITO-PROCESSDEFINITIONS-EVENTS_TOPIC: kogito-processdefinitions-events
      MP_MESSAGING_OUTGOING_KOGITO-PROCESSDEFINITIONS-EVENTS_VALUE_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      KOGITO_ADDON_MONITORING_ELASTIC_HOST: http://elasticsearch:9200
      KOGITO_ADDON_MONITORING_ELASTIC_INDEX: scib-funds-onboarding-process
      KOGITO_ADDON_MONITORING_ELASTIC_AUTOCREATEINDEX: "false"
      KOGITO_ADDON_MONITORING_ELASTIC_STEP: 3s
      #KOGITO_EVENTS_GROUPING: "false"
      QUARKUS_FLYWAY_MIGRATE-AT-START: "true"
      QUARKUS_FLYWAY_BASELINE-ON-MIGRATE: "true"
      QUARKUS_FLYWAY_BASELINE-VERSION: "0.0"
      QUARKUS_FLYWAY_LOCATIONS: "classpath:/db/migration,classpath:/db/jobs-service,classpath:/db/data-audit/postgresql"
      QUARKUS_FLYWAY_TABLE: "FLYWAY_RUNTIME_SERVICE"
      QUARKUS_FLYWAY_OUT-OF-ORDER: "true"
    depends_on:
      postgres:
        condition: service_started
      redpanda:
        condition: service_healthy
  wiremock:
    container_name: wiremock
    image: jizuzquiza/wiremock-studio:2.32.0-18
    profiles:
      - wiremock
    volumes:
      - ./wiremock-stubs:/home/wiremock
    ports:
    - 19000-19010:9000-9010
  kogito-management-console:
    container_name: kogito-management-console
    image: apache/incubator-kie-kogito-management-console:main
    profiles:
      - bamoe-consoles
    ports:
      - '8280:8080'
    depends_on:
      keycloak:
        condition: service_started
    volumes:
      - './svg/:/home/kogito/data/svg/'
    environment:
      KOGITO_CONSOLES_KEYCLOAK_HEALTH_CHECK_URL: >-
        http://localhost:8480/realms/kogito/.well-known/openid-configuration
      KOGITO_CONSOLES_KEYCLOAK_URL: 'http://localhost:8480'
      KOGITO_CONSOLES_KEYCLOAK_REALM: kogito
      KOGITO_CONSOLES_KEYCLOAK_CLIENT_ID: kogito-console-quarkus
      RUNTIME_TOOLS_MANAGEMENT_CONSOLE_KOGITO_ENV_MODE: "PROD"
      RUNTIME_TOOLS_MANAGEMENT_CONSOLE_DATA_INDEX_ENDPOINT: http://localhost:8080/graphql
  kogito-task-console:
    container_name: kogito-task-console
    image: apache/incubator-kie-kogito-task-console:main
    profiles:
      - bamoe-consoles
    ports:
      - '8380:8080'
    depends_on:
      keycloak:
        condition: service_started
    environment:
      KOGITO_CONSOLES_KEYCLOAK_HEALTH_CHECK_URL: >-
        http://localhost:8480/realms/kogito/.well-known/openid-configuration
      KOGITO_CONSOLES_KEYCLOAK_URL: 'http://localhost:8480'
      KOGITO_CONSOLES_KEYCLOAK_REALM: kogito
      KOGITO_CONSOLES_KEYCLOAK_CLIENT_ID: kogito-console-quarkus
      RUNTIME_TOOLS_TASK_CONSOLE_KOGITO_ENV_MODE: "PROD"
      RUNTIME_TOOLS_TASK_CONSOLE_DATA_INDEX_ENDPOINT: http://localhost:8080/graphql
      RUNTIME_TOOLS_TASK_CONSOLE_KOGITO_TASK_STATES_LIST: "Ready,Reserved,Completed,Aborted,Skipped"
      RUNTIME_TOOLS_TASK_CONSOLE_KOGITO_TASK_ACTIVE_STATES_LIST: "Ready,Reserved"
  postgres:
    container_name: postgres
    image: 'postgres:16.1-alpine3.19'
    profiles:
      - postgresql
    ports:
      - '5432:5432'
    volumes:
      - './sql:/docker-entrypoint-initdb.d:Z'
      - 'kogito-database:/var/lib/postgresql/data'
    cpus: 2
    mem_limit: 1024m
    healthcheck:
      test:
        - CMD
        - pg_isready
        - '-q'
        - '-d'
        - kogito
        - '-U'
        - kogito-user
      timeout: 45s
      interval: 10s
      retries: 50
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
  pgadmin:
    image: dpage/pgadmin4:8.2
    container_name: pgadmin
    profiles:
      - pgadmin
    ports:
      - 8055:80
    volumes:
      - ./pgadmin/servers.json:/pgadmin4/servers.json
      - ./pgadmin/pgpass:/pgadmin4/pgpass
    entrypoint: >
      /bin/sh -c "
      cp -f /pgadmin4/pgpass /var/lib/pgadmin/;
      chmod 600 /var/lib/pgadmin/pgpass;
      /entrypoint.sh
      "
    environment:
      PGADMIN_DEFAULT_EMAIL: user@kogito.org
      PGADMIN_DEFAULT_PASSWORD: pass
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
      GUNICORN_ACCESS_LOGFILE: "/dev/null"
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:23.0.7-0
    profiles:
      - bamoe-consoles
    ports:
      - '8480:8080'
    depends_on:
      postgres:
        condition: service_started
    volumes:
      - ./keycloak:/opt/keycloak/data/import
    healthcheck:
      test:
        - CMD
        - curl
        - '-f'
        - 'http://localhost:8080/realms/kogito'
      interval: 2s
      timeout: 1s
      retries: 50
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgresql
      DB_DATABASE: keycloak
      DB_USER: kogito-user
      DB_PASSWORD: kogito-pass
      DB_SCHEMA: public
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command:
      start-dev --import-realm --hostname-port=8480 --health-enabled=true
  redpanda:
    container_name: redpanda
    image: redpandadata/redpanda:v24.2.4
    profiles:
      - messaging-redpanda
    ports:
      - 14001:8081
      - 14002:8082
      - 9092:9092
      - 28082:28082
      - 29092:2909
      - 9093:9093
      - 9644:9644
    volumes:
      - redpanda_data:/var/lib/redpanda/data
    command:
    - redpanda
    - start
    - --smp
    - '6'
    - --reserve-memory
    - 0M
    - --overprovisioned
    - --node-id
    - '0'
    - --kafka-addr
    - PLAINTEXT://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
    - --advertise-kafka-addr
    - PLAINTEXT://redpanda:9093,OUTSIDE://localhost:9092
    - --pandaproxy-addr
    - PLAINTEXT://0.0.0.0:28082,OUTSIDE://0.0.0.0:8082
    - --advertise-pandaproxy-addr
    - PLAINTEXT://redpanda:28082,OUTSIDE://localhost:8082
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/brokers" ]
      interval: 1s
      timeout: 1s
      retries: 50
  redpanda-console:
    container_name: redpanda-console
    image: redpandadata/console:v2.7.2
    profiles:
      - messaging-redpanda
    # mount the local directory that contains your license key to the container.
    # give Redpanda Console read access to the license.
    volumes:
      - ./license:/etc/redpanda:ro
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml && echo "$$CONSOLE_ROLEBINDINGS_CONFIG_FILE" > /tmp/role-bindings.yml && /app/console'
    environment:
      #REDPANDA_LICENSE_FILEPATH: /etc/redpanda/redpanda.license
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9093"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
        login:
          enabled: false
          jwtSecret: change-this-to-something-secret
          useSecureCookies: false
          plain:
            enabled: true
            credentials:
            - username: "jdoe"
              password: "jdoe"
            - username: "john"
              password: "some-secret-password"
        enterprise:
          rbac:
            enabled: false
            roleBindingsFilepath: /tmp/role-bindings.yml
      CONSOLE_ROLEBINDINGS_CONFIG_FILE: |
        roleBindings:
        - metadata:
            name: Platform Ops
          subjects:
            - kind: user
              provider: Plain
              name: jdoe
          roleName: admin
        - metadata:
            name: Software Engineers
          subjects:
            - kind: user
              provider: Plain
              name: john
          roleName: editor
    ports:
      - 9001:8080
    depends_on:
      - redpanda
  otel_collector:
    container_name: opentelemetry-collector
    image: 'otel/opentelemetry-collector-contrib:latest'
    profiles:
      - observability-jaeger
      - observability-prometheus
    volumes:
      - >-
        ./opentelemetry/otel-collector-config.yaml:/etc/otelcol/otel-collector-config.yaml
    command: '--config=/etc/otelcol/otel-collector-config.yaml'
    ports:
      - '13133:13133'
      - '4317:4317' # OTLP gRPC receiver
      - '4318:4318' # OTLP HTTP receiver
      - '15680:55680'
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
    depends_on:
      - jaeger
  jaeger:
    container_name: jaeger
    image: 'jaegertracing/all-in-one:${JAEGER_IMAGE_TAG:-latest}'
    cpus: 2
    mem_limit: 1024m
    profiles:
      - observability-jaeger
    volumes:
      - './jaeger/jaeger-ui.json:/etc/jaeger/jaeger-ui.json'
    command: '--query.ui-config /etc/jaeger/jaeger-ui.json'
    #environment:
    #  - METRICS_STORAGE_TYPE=prometheus
    #  - 'PROMETHEUS_SERVER_URL=http://prometheus:9090'
    #  - >-
    #    PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR=${PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR:-true}
    #  - 'PROMETHEUS_QUERY_NAMESPACE=${PROMETHEUS_QUERY_NAMESPACE:-}'
    #  - 'PROMETHEUS_QUERY_DURATION_UNIT=${PROMETHEUS_QUERY_DURATION_UNIT:-}'
    #  - PROMETHEUS_QUERY_NORMALIZE_CALLS=true
    #  - PROMETHEUS_QUERY_NORMALIZE_DURATION=true
    ports:
      - '16686:16686'
      - '14268' # OTEL Collector HTTP port
      - '14269:14269'
      - '14250' # OTEL Collector gRPC port
  microsim:
    container_name: microsim
    image: 'yurishkuro/microsim:0.3.0'
    profiles:
      - observability-jaeger
      - observability-prometheus
      - observability-elk
    command: '-j http://otel_collector:14278/api/traces -d 24h -s 500ms'
    depends_on:
      - otel_collector
  prometheus:
    container_name: prometheus
    image: 'prom/prometheus:latest'
    profiles:
      - observability-prometheus
    volumes:
      - './prometheus/prometheus.yml:/etc/prometheus/prometheus.yml'
    ports:
      - '9090:9090'
  grafana:
    container_name: grafana
    image: 'grafana/grafana:latest'
    profiles:
      - observability-prometheus
    volumes:
      - './grafana/grafana.ini:/etc/grafana/grafana.ini'
      - >-
        ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - '3000:3000'
  elasticsearch:
    container_name: elasticsearch
    image: docker.io/elastic/elasticsearch:8.15.0
    profiles:
      - observability-elk
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      discovery.type: "single-node"
      xpack.security.enabled: "false"
      cluster.routing.allocation.disk.threshold_enabled: false
  logstash:
    container_name: logstash
    image: docker.io/elastic/logstash:8.15.0
    profiles:
      - observability-elk
    environment:
      monitoring.elasticsearch.hosts: http://elasticsearch-host:9200
    volumes:
      - source: ./logstash/pipelines
        target: /usr/share/logstash/pipeline
        type: bind
    ports:
      - "12201:12201/udp"
      - "5000:5000"
      - "9600:9600"
    depends_on:
      - elasticsearch
  kibana:
    container_name: kibana
    image: docker.io/elastic/kibana:8.15.0
    environment:
      xpack.monitoring.collection.enabled: true
    profiles:
      - observability-elk
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

volumes:
    redpanda_data: {}
    kogito-database: {}